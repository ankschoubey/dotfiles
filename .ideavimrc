"" .ideavimrc - Matt Chapman
" https://mituuz.com/content/intellij-ideavim.html
" https://sethlopez.dev/ideavim/
" https://kietcthe.medium.com/unleash-the-power-of-ideavimrc-enhance-your-intellij-idea-experience-with-advanced-features-5531c3c0641e

"" Base Settings
"" ========================================================

set scrolloff=20
set relativenumber 
set showmode
set showcmd

set smartcase
set incsearch
set hlsearch

set visualbell

" Use system clipboard
set clipboard+=unnamed   

let mapleader = " "

set ideajoin
set ideaput
set ideamarks
set commentary

"" Plugin Settings
"" ========================================================

set surround
set highlightedyank
set sneak
set nerdtree

" Easymotion settings
set easymotion
set notimeout

" Which-key settings
set which-key
let g:WhichKey_DefaultDelay = 0
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowVimActions = "true"

let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_leader = "<leader>x Open file explorer"

let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>w\" Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>w% Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"


let g:WhichKeyDesc_display = "<leader>o Display options"
let g:WhichKeyDesc_zen_mode = "<leader>oz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>od Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>of Toggle full screen"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"
let g:WhichKeyDesc_file_nav_new_scratch_file = "<leader>fs New scratch file"

let g:WhichKeyDesc_NERDTree = "<leader>e Open NERDTree"
let g:WhichKeyDesc_collapse = "<leader>b Collapse all regions"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"

let g:WhichKeyDesc_goto = "<leader>g Go to X"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"

let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

let g:WhichKeyDesc_git = "<leader>g Git operations"
let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit dialog"
let g:WhichKeyDesc_git_status = "<leader>gs Open file structure popup"
let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"
let g:WhichKeyDesc_git_rollback = "<leader>grl Rollback changed lines"

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

let g:WhichKeyDesc_reload = "<leader>R Reload Vim RC"

let g:WhichKeyDesc_test = "<leader>t Test"
let g:WhichKeyDesc_test_run = "<leader>tr Run test under cursor"
let g:WhichKeyDesc_test_run_file = "<leader>trf Run all tests in file"
let g:WhichKeyDesc_test_rerun = "<leader>trp Rerun previous test"

let g:WhichKeyDesc_debug = "<leader>d Debug"
let g:WhichKeyDesc_debug_run = "<leader>dr Debug test under cursor"
let g:WhichKeyDesc_debug_rerun = "<leader>dre Rerun previous debug"
let g:WhichKeyDesc_debug_add_breakpoint = "<leader>da Add breakpoint"
let g:WhichKeyDesc_debug_clear_breakpoints = "<leader>dsa Clear all breakpoints"
let g:WhichKeyDesc_debug_resume = "<leader>i Resume"
let g:WhichKeyDesc_debug_edit_breakpoint = "<leader>de Edit breakpoint"
let g:WhichKeyDesc_debug_toggle_breakpoint = "<leader>dt Toggle breakpoint"
let g:WhichKeyDesc_debug_evaluate = "<leader>ee Evaluate expression"
let g:WhichKeyDesc_debug_run_to_cursor = "<leader>rr Run to cursor"


"" Key mappings
"" ========================================================

inoremap jk <Esc>

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>
nmap <Tab>          <action>(NextTab)
nmap <S-Tab>        <action>(PreviousTab)

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

nnoremap <C-w>m :action MaximizeEditorInSplit<CR>
" Jump between methods
nnoremap [[ <Action>(MethodUp)
nnoremap ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Execute macro saved in 'q' register
nnoremap qj @q

" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)


"" Leader commands
"" ========================================================

" Comment lines
map <leader>c <action>(CommentByLineComment)

" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)

" Bookmark
map <leader>b <action>(ToggleBookmark)
map <leader>B <action>(ShowBookmarks)

" Jump
nmap ]b <Action>(GotoNextBookmark)
nmap [b <Action>(GotoPreviousBookmark)
nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)

"map <leader>b :action CollapseAllRegions<CR>
" Open NERDTree (use q to exit)
map <leader>e :NERDTreeToggle<CR>

" Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>

" Window splits
map <leader>w" <Action>(SplitVertically)
map <leader>w% <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

" Display options
map <leader>od <action>(ToggleDistractionFreeMode)
map <leader>oz <action>(ToggleZenMode)
map <leader>of <action>(ToggleFullScreen)

" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)

" File navigation
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fc <action>(FindInPath)
map <leader><leader> <Action>(RecentFiles)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)

" Close active tab
map <leader>q <action>(CloseContent)

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Forward)

nnoremap <leader>gs  :action FileStructurePopup<CR>

" Git windows
map <leader>gc <Action>(CheckinProject)
"<D-s>map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)
" Reverts selected lines
"'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
map <Leader>grl <action>(Vcs.RollbackChangedLines)
" Errors
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

" Disable Mouse"
nnoremap <Left>  :echo "Use h to move!"<CR>
nnoremap <Down>  :echo "Use j to move!"<CR>
nnoremap <Up>    :echo "Use k to move!"<CR>
nnoremap <Right> :echo "Use l to move!"<CR>

" Reload the IdeaVim configuration.
nnoremap <leader>R   :action IdeaVim.ReloadVimRc.reload<CR>

" Run actions
"'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
" Run the current class or test under the cursor
map <Leader>tr <action>(ContextRun)
" Run all tests in a class or the current class
map <Leader>trf gg<action>(RunClass)<C-O>
" Rerun previous job
map <Leader>trp <action>(Run)

" Debug
"'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
" Debug the current class or test under the cursor
map <leader>dr <action>(ContextDebug)
" Debug previous job
map <leader>dre <action>(Debug)
" Add or remove breakpoint
map <leader>da <action>(ToggleLineBreakpoint)
" Clear every breakpoint in the project
map <leader>dsa <action>(Debugger.RemoveAllBreakpoints)
" Continue running from a breakpoint
map <leader>i <action>(Resume)
" Open breakpoint dialog (add conditionals etc.)
map <leader>de <action>(EditBreakpoint)
" Enable or disable breakpoint without removing it
map <leader>dt <action>(ToggleBreakpointEnabled)
" Open ee dialog to run code at a breakpoint
map <leader>ee <action>(EvaluateExpression)
" Continue running until cursor
map <leader>rr <action>(RunToCursor)

" Plugins from https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins 
" 21 Oct 2025
" Requires https://plugins.jetbrains.com/plugin/28333-vim-anyobject
set anyobject
" Requires https://plugins.jetbrains.com/plugin/28237-vim-dial
set dial
nnoremap <C-a> :DialIncrement<cr>
nnoremap <C-x> :DialDecrement<cr>
let g:dial_include = "basic,numbers,dates"
let g:dial_include = "basic,numbers,dates,java,python:async,markdown:task_item"
" Also install https://plugins.jetbrains.com/plugin/28732-vim-cmdfloat
Plug 'tpope/vim-surround'
set surround
Plug 'unblevable/quick-scope'
" Quick scope is not working right now
" nmap <leader>q <plug>(QuickScopeToggle)
" xmap <leader>q <plug>(QuickScopeToggle)
