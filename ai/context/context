#!/bin/bash

# Color Codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check for jq dependency
if ! command -v jq &> /dev/null
then
    echo -e "${RED}Error: jq is not installed. Please install it to use the monitor feature (e.g., brew install jq).${NC}" >&2
    exit 1
fi

# Get the absolute path of the script's directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# Use the script's directory as the base for the storage path
STORAGE_PATH="$SCRIPT_DIR/../../../.aerospace-context"
TASKS_STORAGE_PATH="$STORAGE_PATH/tasks"

# Ensure the storage directories exist
if [ ! -d "$STORAGE_PATH" ]; then
  mkdir -p "$STORAGE_PATH"
fi
if [ ! -d "$TASKS_STORAGE_PATH" ]; then
  mkdir -p "$TASKS_STORAGE_PATH"
fi

# Function to get the current workspace name
get_workspace_name() {
  aerospace list-workspaces --focused
}

# Function to set the name for the current workspace
set_workspace_name() {
  local workspace_name="$1"
  printf "\033]0;%s\007" "$1"
  local current_workspace=$(get_workspace_name)
  echo "$workspace_name" > "$STORAGE_PATH/$current_workspace"
}

# Function to get the name of the current workspace
get_current_workspace_name() {
  local current_workspace=$(get_workspace_name)
  if [ -f "$STORAGE_PATH/$current_workspace" ]; then
    cat "$STORAGE_PATH/$current_workspace"
  else
    echo "(unnamed)"
  fi
}

# Function to clear the name for the current workspace
clear_workspace_name() {
  local current_workspace=$(get_workspace_name)
  if [ -f "$STORAGE_PATH/$current_workspace" ]; then
    rm "$STORAGE_PATH/$current_workspace"
  fi
}

# Helper to check if a workspace has an in-progress task
_has_in_progress_task() {
  local workspace_id="$1"
  local task_file="$TASKS_STORAGE_PATH/$workspace_id.tasks"
  if [ -f "$task_file" ]; then
    grep -q " in_progress " "$task_file"
    return $?
  fi
  return 1
}

# Helper to get task file content for a specific workspace
_get_task_file_content_for_workspace() {
  local workspace_id="$1"
  local task_file="$TASKS_STORAGE_PATH/$workspace_id.tasks"
  if [ -f "$task_file" ]; then
    printf "${BLUE}Tasks for Workspace %s:\n" "$workspace_id"
    while IFS= read -r line; do
      local id=$(echo "$line" | awk '{print $1}')
      local status=$(echo "$line" | awk '{print $2}')
      local desc=$(echo "$line" | cut -d' ' -f3-)
      case "$status" in
        todo)
          echo -e "  ${YELLOW}[ ] ($id) $desc${NC}"
          ;;
        in_progress)
          echo -e "  ${CYAN}[>] ($id) $desc${NC}"
          ;;
        completed)
          echo -e "  ${GREEN}[x] ($id) $desc${NC}"
          ;;
      esac
    done <<< "$(cat "$task_file")"
  else
    echo -e "${YELLOW}No tasks for Workspace $workspace_id.${NC}"
  fi
}

# Function to list all saved contexts
list_all_contexts() {
  while true; do
    local contexts_list=""
    for file in "$STORAGE_PATH"/*; do
      if [ -f "$file" ]; then
        local workspace_id=$(basename "$file")
        local custom_name=$(cat "$file")
        if _has_in_progress_task "$workspace_id"; then
          custom_name="$custom_name [>]"
        fi
        contexts_list+="$workspace_id $custom_name\n"
      fi
    done

    local menu_options="${contexts_list}Exit"

    local selected_context=$(echo -e "$menu_options" | fzf       --with-nth=2..       --delimiter=' '       --prompt="Select a context to switch to, or Exit: "       --preview="$0 _preview-context-tasks {1}"       --preview-window="up"       --layout=reverse)

    if [ -z "$selected_context" ]; then
      # User pressed Ctrl-C or Esc
      echo -e "${YELLOW}Context switch cancelled.${NC}" >&2
      break
    elif [ "$selected_context" = "Exit" ]; then
      echo -e "${GREEN}Exiting context switcher.${NC}"
      break
    else
      local selected_workspace_id=$(echo "$selected_context" | awk '{print $1}')
      aerospace workspace "$selected_workspace_id"
      echo -e "${GREEN}Switched to workspace: $(get_current_workspace_name) (ID: $selected_workspace_id)${NC}"
    fi
  done
}

# --- Task Management Functions ---

# Helper to get the task file path for the current workspace
_get_task_file_path() {
  local current_workspace=$(get_workspace_name)
  echo "$TASKS_STORAGE_PATH/$current_workspace.tasks"
}

# Helper to get the next available task ID
_get_next_task_id() {
  local task_file=$(_get_task_file_path)
  if [ -f "$task_file" ]; then
    # Get the max ID and add 1, or start from 1 if no tasks
    local max_id=$(awk -F' ' '{print $1}' "$task_file" 2>/dev/null | sort -nr | head -n 1)
    if [ -z "$max_id" ]; then
      echo 1
    else
      echo $((max_id + 1))
    fi
  else
    echo 1
  fi
}

# Helper to read tasks from the current workspace's task file
_read_tasks() {
  local task_file=$(_get_task_file_path)
  if [ -f "$task_file" ]; then
    cat "$task_file"
  else
    echo "" # Return empty string if file doesn't exist
  fi
}

# Helper to write tasks to the current workspace's task file
_write_tasks() {
  local task_file=$(_get_task_file_path)
  printf "%b" "$1" > "$task_file"
}

# Add a new task
add_task() {
  local description="$*"
  if [ -z "$description" ]; then
    read -p "Enter task description: " description
    if [ -z "$description" ]; then
      echo -e "${RED}Task description cannot be empty.${NC}" >&2
      return 1
    fi # Added missing fi
  fi
  local task_id=$(_get_next_task_id)
  local new_task_line="$task_id todo $description"
  local current_tasks=$(_read_tasks)
  
  if [ -z "$current_tasks" ]; then
    _write_tasks "$new_task_line"
  else
    _write_tasks "$current_tasks\n$new_task_line"
  fi
  echo -e "${GREEN}Task added: $new_task_line${NC}"
}

# List tasks for the current workspace
list_tasks() {
  _check_and_update_monitor_status
  local task_file=$(_get_task_file_path)
  if [ -f "$task_file" ]; then
    printf "${BLUE}Tasks for %s (Workspace %s):\n"
"$(get_current_workspace_name)" "$(get_workspace_name)"
    while IFS= read -r line; do
      local id=$(echo "$line" | awk '{print $1}')
      local status=$(echo "$line" | awk '{print $2}')
      local desc=$(echo "$line" | cut -d' ' -f3-)
      local monitor_script_name=$(echo "$line" | awk '{print $4}')
      local monitor_pid=$(echo "$line" | awk '{print $5}')

      local display_desc="$desc"
      # Only show [M] if actively monitoring
      if [ "$status" = "monitoring" ] && [ -n "$monitor_script_name" ]; then
        display_desc="$desc ${MAGENTA}[M]${NC}"
      fi

      case "$status" in
        todo)
          echo -e "  ${YELLOW}[ ] ($id) $display_desc${NC}"
          ;;
        in_progress)
          echo -e "  ${CYAN}[>] ($id) $display_desc${NC}"
          ;;
        completed)
          echo -e "  ${GREEN}[x] ($id) $display_desc${NC}"
          ;;
        monitoring)
          echo -e "  ${MAGENTA}[M] ($id) $display_desc${NC}"
          ;;
        error)
          echo -e "  ${RED}[!] ($id) $display_desc${NC}"
          ;;
        stopped)
          echo -e "  ${BLUE}[S] ($id) $display_desc${NC}"
          ;;
      esac
    done <<< "$(_read_tasks)"
  else
    echo -e "${YELLOW}No tasks for $(get_current_workspace_name) (Workspace $(get_workspace_name)).${NC}"
  fi
}

# Helper to format tasks for fzf preview
_list_tasks_formatted_for_fzf() {
  _check_and_update_monitor_status
  local task_file=$(_get_task_file_path)
  if [ -f "$task_file" ]; then
    printf "${BLUE}Tasks for %s (Workspace %s):\n" "$(get_current_workspace_name)" "$(get_workspace_name)"
    while IFS= read -r line; do
      local id=$(echo "$line" | awk '{print $1}')
      local status=$(echo "$line" | awk '{print $2}')
      local desc=$(echo "$line" | cut -d' ' -f3-)
      local monitor_script_name=$(echo "$line" | awk '{print $4}')
      local monitor_pid=$(echo "$line" | awk '{print $5}')

      local display_desc="$desc"
      # Only show [M] if actively monitoring
      if [ "$status" = "monitoring" ] && [ -n "$monitor_script_name" ]; then
        display_desc="$desc ${MAGENTA}[M]${NC}"
      fi

      case "$status" in
        todo)
          echo -e "  ${YELLOW}[ ] ($id) $display_desc${NC}"
          ;;
        in_progress)
          echo -e "  ${CYAN}[>] ($id) $display_desc${NC}"
          ;;
        completed)
          echo -e "  ${GREEN}[x] ($id) $display_desc${NC}"
          ;;
        monitoring)
          echo -e "  ${MAGENTA}[M] ($id) $display_desc${NC}"
          ;;
        error)
          echo -e "  ${RED}[!] ($id) $display_desc${NC}"
          ;;
        stopped)
          echo -e "  ${BLUE}[S] ($id) $display_desc${NC}"
          ;;
      esac
    done <<< "$(_read_tasks)"
  else
    echo -e "${YELLOW}No tasks for $(get_current_workspace_name) (Workspace $(get_workspace_name)).${NC}"
  fi
}

# Helper to select a task using fzf
_fzf_task_selector() {
  local task_file=$(_get_task_file_path)
  if [ ! -f "$task_file" ] || [ -z "$(cat "$task_file")" ]; then
    echo -e "${YELLOW}No tasks to select.${NC}" >&2
    return 1
  fi

  local selected_task=$(cat "$task_file" | fzf --with-nth=3.. --delimiter=' ' --prompt="Select a task: " --preview="$0 _preview-task-details {}" --layout=reverse --preview-window="$FZF_PREVIEW_WINDOW_LAYOUT")
  if [ -n "$selected_task" ]; then
    echo "$(echo "$selected_task" | awk '{print $1}')"
  fi
}

# Helper to preview a single task's details for fzf
_preview_task_details() {
  local task_id=$(echo "$1" | awk '{print $1}')
  local task_file=$(_get_task_file_path)
  grep "^$task_id " "$task_file" | while IFS= read -r line; do
    local id=$(echo "$line" | awk '{print $1}')
    local status=$(echo "$line" | awk '{print $2}')
    local desc=$(echo "$line" | cut -d' ' -f3-)
    local monitor_script_name=$(echo "$line" | awk '{print $4}')
    local monitor_pid=$(echo "$line" | awk '{print $5}')

    printf "ID: %s\nStatus: %s\nDescription: %s\n" "$id" "$status" "$desc"

    if [ "$status" = "monitoring" ] && [ -n "$monitor_script_name" ]; then
      local monitor_log_file="$SCRIPT_DIR/monitor_logs/task_${id}_${monitor_script_name%.*}.log"
      if [ -f "$monitor_log_file" ]; then
        printf "\n--- Monitor Output (Live) ---\n"
        while true; do
          # Check if the log file still exists and the monitor process is running
          if [ ! -f "$monitor_log_file" ] || ! kill -0 "$monitor_pid" 2>/dev/null; then
            echo "Monitor stopped or log file removed."
            break
          fi
          # Read the last line and format it
          tail -n 1 "$monitor_log_file" | jq -r '.message + " (Status: " + .status + ")"'
          sleep 0.5 # Update every 0.5 seconds
        done
      else
        printf "\n--- Monitor Log Not Found ---\n"
      fi
    fi
  done
}

# Update task status (in_progress or completed)
update_task_status() {
  local task_id="$1"
  local new_status="$2"
  local monitor_script_name="${3:-}"
  local monitor_pid="${4:-}"

  if [ -z "$task_id" ]; then
    task_id=$(_fzf_task_selector)
    if [ -z "$task_id" ]; then
      return 1
    fi
  fi

  local updated=false
  local new_tasks_content=""
  while IFS= read -r line; do
    local id=$(echo "$line" | awk '{print $1}')
    if [ "$id" = "$task_id" ]; then
      local current_desc=$(echo "$line" | cut -d' ' -f3-)
      # Remove any existing monitor info from the description
      current_desc=$(echo "$current_desc" | sed 's/ \[.*\] \[.*\]$//')

      local new_line="$id $new_status $current_desc"
      if [ "$new_status" = "monitoring" ] && [ -n "$monitor_script_name" ] && [ -n "$monitor_pid" ]; then
        new_line="$new_line $monitor_script_name $monitor_pid"
      fi
      new_tasks_content+="$new_line\n"
      updated=true
    else
      new_tasks_content+="$line\n"
    fi
  done <<< "$(_read_tasks)"

  if [ "$updated" = true ]; then
    _write_tasks "$(echo -e "$new_tasks_content" | sed 's/\n$//')"
    echo -e "${GREEN}Task $task_id marked as $new_status.${NC}"
  else
    echo -e "${RED}Task $task_id not found.${NC}" >&2
  fi
}

# Remove a task
remove_task() {
  local task_id="$1"
  if [ -z "$task_id" ]; then
    task_id=$(_fzf_task_selector)
    if [ -z "$task_id" ]; then
      return 1
    fi
  fi

  local removed=false
  local new_tasks_content=""
  while IFS= read -r line; do
    local id=$(echo "$line" | awk '{print $1}')
    if [ "$id" = "$task_id" ]; then
      removed=true
    else
      new_tasks_content+="$line\n"
    fi
  done <<< "$(_read_tasks)"

  if [ "$removed" = true ]; then
    _write_tasks "$(echo -e "$new_tasks_content" | sed 's/\n$//')"
    echo -e "${GREEN}Task $task_id removed.${NC}"
  else
    echo -e "${RED}Task $task_id not found.${NC}" >&2
  fi
}

# Check and update status of monitored tasks
_check_and_update_monitor_status() {
  local task_file=$(_get_task_file_path)
  if [ ! -f "$task_file" ]; then
    return 0
  fi

  local updated_tasks_content=""
  local tasks_changed=false

  while IFS= read -r line; do
    local id=$(echo "$line" | awk '{print $1}')
    local status=$(echo "$line" | awk '{print $2}')
    local desc=$(echo "$line" | cut -d' ' -f3-)
    local monitor_script_name=$(echo "$line" | awk '{print $4}')
    local monitor_pid=$(echo "$line" | awk '{print $5}')

    if [ "$status" = "monitoring" ] && [ -n "$monitor_script_name" ] && [ -n "$monitor_pid" ]; then
      local monitor_log_file="$SCRIPT_DIR/monitor_logs/task_${id}_${monitor_script_name%.*}.log"
      local current_monitor_status="running"

      # Check if monitor process is still running
      if ! kill -0 "$monitor_pid" 2>/dev/null; then
        current_monitor_status="stopped" # Process is no longer running
      elif [ -f "$monitor_log_file" ]; then
        # Read last line of log and parse status
        local last_log_entry=$(tail -n 1 "$monitor_log_file" 2>/dev/null)
        if [ -n "$last_log_entry" ]; then
          local parsed_status=$(echo "$last_log_entry" | jq -r '.status' 2>/dev/null)
          if [ "$parsed_status" = "completed" ] || [ "$parsed_status" = "error" ]; then
            current_monitor_status="$parsed_status"
          fi
        fi
      fi

      if [ "$current_monitor_status" = "completed" ] || [ "$current_monitor_status" = "error" ] || [ "$current_monitor_status" = "stopped" ]; then
        # Update task status and remove monitor info
        local new_task_status="completed" # Default to completed if monitor finished
        if [ "$current_monitor_status" = "error" ]; then
          new_task_status="error"
        elif [ "$current_monitor_status" = "stopped" ]; then
          new_task_status="stopped"
        fi
        updated_tasks_content+="$id $new_task_status $(echo "$desc" | sed 's/ \[.*\] \[.*\]$//')\n"
        tasks_changed=true
      else
        updated_tasks_content+="$line\n"
      fi
    else
      updated_tasks_content+="$line\n"
    fi
  done <<< "$(_read_tasks)"

  if [ "$tasks_changed" = true ]; then
    _write_tasks "$(echo -e "$updated_tasks_content" | sed 's/\n$//')"
  fi
}

# Reset all contexts and tasks
reset_all_contexts_and_tasks() {
  echo -e "${YELLOW}Resetting all contexts and tasks...${NC}"
  rm -rf "$STORAGE_PATH"/*
  rm -rf "$TASKS_STORAGE_PATH"/*
  rm -rf "$SCRIPT_DIR/monitor_logs"/*
  echo -e "${GREEN}All contexts, tasks, and monitor logs have been removed.${NC}"
}

# Start monitoring a task
start_monitor_for_task() {
  local task_id="$1"
  if [ -z "$task_id" ]; then
    task_id=$(_fzf_task_selector)
    if [ -z "$task_id" ]; then
      return 1
    fi
  fi

  local monitor_scripts_dir="$SCRIPT_DIR/monitor"
  local available_monitors=""
  for file in "$monitor_scripts_dir"/*; do
    if [ -f "$file" ] && [ -x "$file" ]; then
      available_monitors+="$(basename "$file")\n"
    fi
  done

  if [ -z "$available_monitors" ]; then
    echo -e "${RED}No executable monitor scripts found in $monitor_scripts_dir.${NC}" >&2
    return 1
  fi

  local selected_monitor=$(echo -e "$available_monitors" | fzf --prompt="Select a monitor script: ")
  if [ -z "$selected_monitor" ]; then
    echo -e "${YELLOW}Monitor selection cancelled.${NC}" >&2
    return 1
  fi

  local monitor_script_path="$monitor_scripts_dir/$selected_monitor"
  local monitor_log_dir="$SCRIPT_DIR/monitor_logs"
  mkdir -p "$monitor_log_dir"
  local monitor_log_file="$monitor_log_dir/task_${task_id}_${selected_monitor%.*}.log"

  read -p "Enter arguments for $selected_monitor (e.g., '60' for timer): " monitor_args

  # Run the monitor script in the background
  nohup "$monitor_script_path" "$monitor_args" "$task_id" > /dev/null 2>&1 &
  local monitor_pid=$!

  # Update task status to monitoring
  update_task_status "$task_id" "monitoring" "$selected_monitor" "$monitor_pid"
  echo -e "${GREEN}Task $task_id is now being monitored by $selected_monitor (PID: $monitor_pid). Log: $monitor_log_file${NC}"
}

# Main function
main() {
  local FZF_PREVIEW_WINDOW_LAYOUT="up"
  local FZF_LAYOUT_OPTION="--layout=reverse"

  if [ "$1" = "set" ]; then
    set_workspace_name "$2"
  elif [ "$1" = "get" ]; then
    get_current_workspace_name
  elif [ "$1" = "clear" ]; then
    clear_workspace_name
  elif [ "$1" = "switch" ]; then
    list_all_contexts
  elif [ "$1" = "reset" ]; then
    reset_all_contexts_and_tasks
  elif [ "$1" = "current" ]; then
    shift # Remove 'current' from arguments

    # Check for optional layout argument
    if [ "$1" = "td" ]; then
      FZF_PREVIEW_WINDOW_LAYOUT="up"
      shift
    elif [ "$1" = "lr" ]; then
      FZF_PREVIEW_WINDOW_LAYOUT="right"
      FZF_LAYOUT_OPTION="--layout=reverse"
      shift
    fi

    if [ -z "$1" ]; then
      _check_and_update_monitor_status
      # No subcommand, show fzf menu
      while true; do
        local action=$(echo -e "Add Task\nMark In Progress\nMark Complete\nRemove Task\nMonitor Task\nExit" | fzf --prompt="Select action: " --preview="$0 _preview-tasks" "$FZF_LAYOUT_OPTION" --preview-window="$FZF_PREVIEW_WINDOW_LAYOUT")
        case "$action" in
          "Add Task")
            add_task
            ;;
          "Mark In Progress")
            update_task_status "" "in_progress"
            ;;
          "Mark Complete")
            update_task_status "" "completed"
            ;;
          "Remove Task")
            remove_task
            ;;
          "Monitor Task")
            start_monitor_for_task ""
            ;;
          "Exit")
            break
            ;;
          *)
            echo -e "${YELLOW}Action cancelled.${NC}" >&2
            break
            ;;
        esac
      done
    else
      # Subcommand provided
      case "$1" in
        add)
          shift # Remove 'add'
          add_task "$@"
          ;;
        list)
          list_tasks
          ;;
        progress)
          update_task_status "$2" "in_progress"
          ;;
        complete)
          update_task_status "$2" "completed"
          ;;
        remove)
          remove_task "$2"
          ;;
        monitor)
          start_monitor_for_task "$2"
          ;;
        *)
          echo -e "${RED}Usage: ctx current [td|lr] [add <description>|list|progress <task_id>|complete <task_id>|remove <task_id>|monitor <task_id>]${NC}" >&2
          return 1
          ;;
      esac
    fi
  elif [ "$1" = "_preview-tasks" ]; then
    _list_tasks_formatted_for_fzf
  elif [ "$1" = "_preview-context-tasks" ]; then
    _get_task_file_content_for_workspace "$2"
  elif [ "$1" = "_preview-task-details" ]; then
    _preview_task_details "$2"
  else
    echo -e "${RED}Usage: context [set|get|clear|switch] [name]${NC}"
    echo -e "${RED}       context current [td|lr] [add <description>|list|progress <task_id>|complete <task_id>|remove <task_id>]${NC}"
  fi
}

main "$@"